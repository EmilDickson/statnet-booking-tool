{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","setState","csvfile","target","files","importCSV","state","Papa","parse","complete","updateData","header","noteBox","note","icon","faInfoCircle","data-tip","data-for","id","ref","tooltip","place","type","effect","className","clickable","handleRequestClick","e","newRequests","i","modifiedRequest","accepted","map","item","j","generateRequestList","requestObjects","length","push","key","requestInfo","onClick","faThumbsUp","style","faThumbsDown","copyToClipboard","textArea","select","document","execCommand","formatAMPM","date","hours","getHours","minutes","getMinutes","ampm","generateOutputCsv","info","newDate","rawCT","Date","parseInt","split","rawPGM","replace","RegExp","generateBookings","monthNames","1","2","3","4","5","6","7","8","9","10","11","12","message","csvDataOut","answer","emailMessage","console","log","unparse","csvContent","join","encodedUri","encodeURI","window","open","undefined","bind","result","data","this","requestId","input","filesInput","name","placeholder","onChange","Button","Table","bordered","hover","variant","textarea","value","readOnly","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mYASqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZC,QAASF,EAAMG,OAAOC,MAAM,MAZb,EAgBnBC,UAAY,WAAO,IACTH,EAAY,EAAKI,MAAjBJ,QACRK,IAAKC,MAAMN,EAAS,CAClBO,SAAU,EAAKC,WACfC,QAAQ,KApBO,EAuCnBC,QAAU,SAACC,GACT,OACA,4BACE,kBAAC,IAAD,CAAiBC,KAAMC,IAAcC,YAAA,EAASC,WAAS,gBACvD,kBAAC,IAAD,CAAcC,GAAG,cAAcC,IAAK,EAAKC,QAASC,MAAM,MAAMC,KAAK,OAAOC,OAAO,QAAQC,UAAU,iBAAiBC,WAAS,GAC3H,8BACGZ,MA7CU,EAmDnBa,mBAAqB,SAACC,GAAO,IACnBC,EAAgB,EAAKtB,MAArBsB,YACFC,EAAIF,EAAExB,OAAOe,GACfY,EAAkBF,EAAYC,GAClCC,EAAgBC,UAAY,EAAKzB,MAAMsB,YAAYC,GAAGE,SACtD,EAAK9B,UAAS,SAAAK,GAQZ,MAAO,CACLsB,YARkBtB,EAAMsB,YAAYI,KAAI,SAACC,EAAMC,GAC/C,OAAIA,IAAML,EACDC,EAEAG,UA7DI,EAsEnBE,oBAAsB,WAIpB,IAJ2B,IACnBP,EAAgB,EAAKtB,MAArBsB,YACJQ,EAAiB,GAEZP,EAAI,EAAGA,EAAID,EAAYS,OAAQR,IACtCO,EAAeE,KACb,wBAAIC,IAAK,WAAaV,GACpB,4BAAKD,EAAYC,GAAGW,YAAY,IAChC,4BAAKZ,EAAYC,GAAGW,YAAY,GAAK,KAAOZ,EAAYC,GAAGW,YAAY,GAAK,KAC5E,4BAAKZ,EAAYC,GAAGW,YAAY,GAAK,KAAOZ,EAAYC,GAAGW,YAAY,GAAK,KAC5E,4BAAKZ,EAAYC,GAAGW,YAAY,GAAK,MAAQZ,EAAYC,GAAGW,YAAY,IACvEZ,EAAYC,GAAGW,YAAY,IAAIH,OAAS,EAAI,EAAKzB,QAAQgB,EAAYC,GAAGW,YAAY,KAAO,6BAC5F,wBAAItB,GAAIW,EAAGY,QAAS,SAAAd,GAAC,OAAI,EAAKD,mBAAmBC,KAC9CC,EAAYC,GAAGE,SACd,kBAAC,IAAD,CAAiBjB,KAAM4B,IAAYC,MAAO,CAAC,cAAiB,UAC5D,kBAAC,IAAD,CAAiB7B,KAAM8B,IAAcD,MAAO,CAAC,cAAiB,aAKxE,OAAOP,GA1FU,EA6FnBS,gBAAkB,WACL,EAAKC,SACbC,SACHC,SAASC,YAAY,SAhGJ,EAmGnBC,WAAa,SAACC,GACZ,IAAIC,EAAQD,EAAKE,WACbC,EAAUH,EAAKI,aACfC,EAAOJ,GAAS,GAAK,KAAO,KAKhC,OAHAA,GADAA,GAAgB,KACQ,IAEF,KADtBE,EAAUA,EAAU,GAAK,IAAIA,EAAUA,GACD,IAAME,GA1G3B,EA8GnBC,kBAAoB,SAACN,EAAMO,GAEzB,IAAMC,EAAUR,EAAK,GAAK,IAAMA,EAAK,GAAK,IAAMA,EAAK,GAC/CS,EAAQ,IAAIC,KAChBC,SAASX,EAAK,IACdW,SAASX,EAAK,GAAK,GACnBW,SAASX,EAAK,IACdW,SAASJ,EAAK,GAAGK,MAAM,KAAK,IAC5BD,SAASJ,EAAK,GAAGK,MAAM,KAAK,KAExBC,EAAS,IAAIH,KACjBC,SAASX,EAAK,IACdW,SAASX,EAAK,GAAK,GACnBW,SAASX,EAAK,IACdW,SAASJ,EAAK,GAAGK,MAAM,KAAK,IAAM,EAClCD,SAASJ,EAAK,GAAGK,MAAM,KAAK,IAAM,IAEpC,MAAO,CACL,WAAaL,EAAK,GAAK,IAAMA,EAAK,GAAK,MAAQA,EAAK,GAAK,KAAOA,EAAK,GAAK,IAC1EC,EACA,EAAKT,WAAWU,GAChBD,EACA,EAAKT,WAAWc,GAChBN,EAAK,IAAIO,QAAQ,IAAIC,OAAO,IAAK,KAAM,OArIxB,EAyInBC,iBAAmB,WAmBjB,IAnBwB,IAChBvC,EAAgB,EAAKtB,MAArBsB,YACFwC,EAAa,CACjBC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,GAAI,MACJC,GAAI,MACJC,GAAI,OAGFC,EAAU,GACVC,EAAa,CAAC,CAAC,UAAW,aAAc,aAAc,WAAY,WAAY,gBACzErD,EAAI,EAAGA,EAAID,EAAYS,OAAQR,IAAK,CAC3C,IAAMsD,EAASvD,EAAYC,GAAGE,SAAW,KAAO,MAC5CoB,EAAOvB,EAAYC,GAAGW,YAAY,GAAGuB,MAAM,KAC/CkB,GAAW9B,EAAK,GAAK,IAAMiB,EAAWN,SAASX,EAAK,KAAO,KAAOgC,EAAS,KACvEvD,EAAYC,GAAGE,UACjBmD,EAAW5C,KAAK,EAAKmB,kBAAkBN,EAAMvB,EAAYC,GAAGW,cAGhE,EAAKvC,SAAS,CACZmF,aAAcH,IAGhBI,QAAQC,IAAI/E,IAAKgF,QAAQL,IACzB,IAAIM,EAAa,+BAAiCN,EAAWlD,KAAI,SAAAL,GAAC,OAAIA,EAAE8D,KAAK,QAAMA,KAAK,MAClFC,EAAaC,UAAUH,GAC7BI,OAAOC,KAAKH,IAzKZ,EAAKpF,MAAQ,CACXJ,aAAS4F,EACTlE,YAAa,GACbwD,aAAc,IAEhB,EAAK1E,WAAa,EAAKA,WAAWqF,KAAhB,gBAPD,E,wEAwBRC,GAET,IADA,IAAIC,EAAOD,EAAOC,KACTpE,EAAI,EAAGA,EAAIoE,EAAK5D,OAAQR,IACZ,kBAAfoE,EAAKpE,GAAG,IACVqE,KAAKjG,SAAS,CACZ2B,YAAY,GAAD,mBAAMsE,KAAK5F,MAAMsB,aAAjB,CAA8B,CACvCuE,UAAW,WAAatE,EACxBE,UAAU,EACVS,YAAayD,EAAKpE,U,+BA8IlB,IAAD,OACP,OACE,yBAAKL,UAAU,OACb,6DACA,2BACEA,UAAU,YACVF,KAAK,OACLH,IAAK,SAAAiF,GACH,EAAKC,WAAaD,GAEpBE,KAAK,OACLC,YAAa,KACbC,SAAUN,KAAKnG,eAEjB,4BACA,kBAAC0G,EAAA,EAAD,CAAQhE,QAASyD,KAAK7F,WAAtB,iBACC6F,KAAK5F,MAAMsB,YAAYS,OAAS,EAC/B,yBAAKb,UAAU,gBACb,kBAACkF,EAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,GACnB,+BACE,4BACE,qCACA,wCACA,qCACA,mCACA,wCACA,4CAGJ,+BAAQV,KAAK/D,yBAGf,KACJ,kBAACsE,EAAA,EAAD,CAAQhE,QAASyD,KAAK/B,iBAAkB0C,QAAQ,WAAhD,QACCX,KAAK5F,MAAM8E,aAAa/C,OAAS,EAChC,yBAAKb,UAAU,gBACb,uEACA,8BACEL,IAAK,SAAA2F,GAAQ,OAAK,EAAKhE,SAAWgE,GAClCC,MAAOb,KAAK5F,MAAM8E,aAClB4B,UAAQ,IAEV,kBAACP,EAAA,EAAD,CAAQhE,QAASyD,KAAKrD,gBAAiBgE,QAAQ,QAA/C,uBAEA,U,GA3NqBI,aCGbC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvE,SAASwE,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7196aea1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Papa from 'papaparse';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp, faThumbsDown, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport ReactToolTip from 'react-tooltip';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      csvfile: undefined,\n      newRequests: [],\n      emailMessage: \"\"\n    }\n    this.updateData = this.updateData.bind(this)\n  }\n\n  handleChange = event => {\n    this.setState({\n      csvfile: event.target.files[0]\n    });\n  };\n\n  importCSV = () => {\n    const { csvfile } = this.state;\n    Papa.parse(csvfile, {\n      complete: this.updateData,\n      header: false\n    })\n  }\n\n  updateData(result) {\n    var data = result.data;\n    for (let i = 3; i < data.length; i++) {\n      if (data[i][9] === \"Tillfrågad\") {\n        this.setState({\n          newRequests: [...this.state.newRequests, {\n            requestId: \"request_\" + i,\n            accepted: false,\n            requestInfo: data[i]\n          }]\n        })\n      }\n    }\n  }\n\n  noteBox = (note) => {\n    return(\n    <td>\n      <FontAwesomeIcon icon={faInfoCircle} data-tip data-for=\"noteToolTip\"/>\n      <ReactToolTip id=\"noteToolTip\" ref={this.tooltip} place=\"top\" type=\"dark\" effect=\"solid\" className=\"toolTipWrapper\" clickable>\n        <span>\n          {note}\n        </span>\n      </ReactToolTip>\n    </td>)\n  }\n\n  handleRequestClick = (e) => {\n    const { newRequests } = this.state;\n    const i = e.target.id;\n    let modifiedRequest = newRequests[i];\n    modifiedRequest.accepted = !this.state.newRequests[i].accepted;\n    this.setState(state => {\n      const newRequests = state.newRequests.map((item, j) => {\n        if (j === i) {\n          return modifiedRequest\n        } else {\n          return item\n        }\n      });\n      return {\n        newRequests,\n      };\n    });\n  }\n\n  generateRequestList = () => {\n    const { newRequests } = this.state;\n    let requestObjects = [];\n    // 0 = datum, 1 = pgm, 2 = CT, 3 = kund, 4 = prod., 5 = liga, 6 = hemma, 7 = borta, 8 = mitt namn (?), 9 = status, 10 = notering\n    for (let i = 0; i < newRequests.length; i++) {\n      requestObjects.push(\n        <tr key={\"request_\" + i}>\n          <td>{newRequests[i].requestInfo[0]}</td>\n          <td>{newRequests[i].requestInfo[2] + \" (\" + newRequests[i].requestInfo[1] + \")\"}</td>\n          <td>{newRequests[i].requestInfo[4] + \" (\" + newRequests[i].requestInfo[5] + \")\"}</td>\n          <td>{newRequests[i].requestInfo[6] + \" - \" + newRequests[i].requestInfo[7]}</td>\n          {newRequests[i].requestInfo[10].length > 0 ? this.noteBox(newRequests[i].requestInfo[10]) : <td></td>}\n          <td id={i} onClick={e => this.handleRequestClick(e)}>\n            {newRequests[i].accepted ?\n              <FontAwesomeIcon icon={faThumbsUp} style={{\"pointerEvents\": \"none\"}} /> :\n              <FontAwesomeIcon icon={faThumbsDown} style={{\"pointerEvents\": \"none\"}} />}\n          </td>\n        </tr>\n      )\n    }\n    return requestObjects;\n  }\n\n  copyToClipboard = () => {\n    const el = this.textArea\n    el.select()\n    document.execCommand(\"copy\")\n  }\n\n  formatAMPM = (date) => {\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0'+minutes : minutes;\n    var strTime = hours + ':' + minutes + ' ' + ampm;\n    return strTime;\n  }\n\n  generateOutputCsv = (date, info) => {\n    // Returnera en lista som är på csvDataOut-formatet\n    const newDate = date[1] + \"/\" + date[2] + \"/\" + date[0];\n    const rawCT = new Date(\n      parseInt(date[0]),\n      parseInt(date[1] - 1),\n      parseInt(date[2]),\n      parseInt(info[2].split(\":\")[0]),\n      parseInt(info[2].split(\":\")[1])\n    );\n    const rawPGM = new Date(\n      parseInt(date[0]),\n      parseInt(date[1] - 1),\n      parseInt(date[2]),\n      parseInt(info[1].split(\":\")[0]) + 2,\n      parseInt(info[1].split(\":\")[1]) + 40\n    );\n    return [\n      \"Statnet \" + info[5] + \" \" + info[6] + \" - \" + info[7] + \" (\" + info[4] + \")\",\n      newDate,\n      this.formatAMPM(rawCT),\n      newDate,\n      this.formatAMPM(rawPGM),\n      info[10].replace(new RegExp(\",\", \"g\"), \".\")\n    ]\n  }\n\n  generateBookings = () => {\n    const { newRequests } = this.state;\n    const monthNames = {\n      1: \"Jan\",\n      2: \"Feb\",\n      3: \"Mar\",\n      4: \"Apr\",\n      5: \"Maj\",\n      6: \"Jun\",\n      7: \"Jul\",\n      8: \"Aug\",\n      9: \"Sep\",\n      10: \"Okt\",\n      11: \"Nov\",\n      12: \"Dec\",\n    };\n    // Email message\n    let message = \"\";\n    let csvDataOut = [[\"Subject\", \"Start Date\", \"Start Time\", \"End Date\", \"End Time\", \"Description\"]]\n    for (let i = 0; i < newRequests.length; i++) {\n      const answer = newRequests[i].accepted ? \"Ja\" : \"Nej\";\n      let date = newRequests[i].requestInfo[0].split('-');\n      message += date[2] + \" \" + monthNames[parseInt(date[1])] + \": \" + answer + \"\\n\"\n      if (newRequests[i].accepted) {\n        csvDataOut.push(this.generateOutputCsv(date, newRequests[i].requestInfo));\n      }\n    }\n    this.setState({\n      emailMessage: message\n    });\n    // Skapa csv-filen här.\n    console.log(Papa.unparse(csvDataOut));\n    let csvContent = \"data:text/csv;charset=utf-8,\" + csvDataOut.map(e => e.join(\",\")).join(\"\\n\");\n    const encodedUri = encodeURI(csvContent);\n    window.open(encodedUri);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Statnet booking CSV generator</h2>\n        <input\n          className=\"csv-input\"\n          type=\"file\"\n          ref={input => {\n            this.filesInput = input;\n          }}\n          name=\"file\"\n          placeholder={null}\n          onChange={this.handleChange}\n        />\n        <p />\n        <Button onClick={this.importCSV}>Ladda upp fil</Button>\n        {this.state.newRequests.length > 0 ? (\n          <div className=\"tableWrapper\">\n            <Table bordered hover>\n              <thead>\n                <tr>\n                  <th>Datum</th>\n                  <th>CT (pgm)</th>\n                  <th>Prod.</th>\n                  <th>Lag</th>\n                  <th>Notering</th>\n                  <th>Accepterad</th>\n                </tr>\n              </thead>\n              <tbody>{this.generateRequestList()}</tbody>\n            </Table>\n          </div>\n        ) : null}\n        <Button onClick={this.generateBookings} variant=\"success\">Klar</Button>\n        {this.state.emailMessage.length > 0 ? (\n          <div className=\"emailMessage\">\n            <h3>Svarsmeddelande att maila till bokning:</h3>\n            <textarea\n              ref={textarea => (this.textArea = textarea)}\n              value={this.state.emailMessage}\n              readOnly\n            />\n            <Button onClick={this.copyToClipboard} variant=\"info\">Kopiera meddelande</Button>\n          </div>\n        ) : null}\n      </div>\n    );\n}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}