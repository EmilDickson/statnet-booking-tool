{"version":3,"sources":["components/RequestTable.js","App.js","serviceWorker.js","index.js"],"names":["RequestTable","noteBox","note","icon","faInfoCircle","data-tip","data-for","id","ref","tooltip","place","type","effect","className","clickable","generateRequestList","props","newRequests","handleRequestClick","requestObjects","i","length","push","key","requestInfo","onClick","e","accepted","faThumbsUp","style","pointerEvents","faThumbsDown","Table","bordered","hover","this","Component","App","handleChange","event","setState","csvfile","target","files","importCSV","state","Papa","parse","complete","updateData","header","modifiedRequest","map","item","j","copyToClipboard","textArea","select","document","execCommand","formatAMPM","date","hours","getHours","minutes","getMinutes","ampm","generateOutputCsv","info","newDate","rawCT","Date","parseInt","split","rawPGM","replace","RegExp","generateBookings","monthNames","1","2","3","4","5","6","7","8","9","10","11","12","message","csvDataOut","answer","emailMessage","console","log","unparse","csvContent","join","encodedUri","encodeURI","window","open","undefined","bind","result","data","requestId","input","filesInput","name","placeholder","onChange","Button","variant","textarea","value","readOnly","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d245b78.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\nimport Table from \"react-bootstrap/Table\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faThumbsUp,\n  faThumbsDown,\n  faInfoCircle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ReactToolTip from \"react-tooltip\";\n\nexport default class RequestTable extends Component {\n  noteBox = note => {\n    return (\n      <td>\n        <FontAwesomeIcon icon={faInfoCircle} data-tip data-for=\"noteToolTip\" />\n        <ReactToolTip\n          id=\"noteToolTip\"\n          ref={this.tooltip}\n          place=\"top\"\n          type=\"dark\"\n          effect=\"solid\"\n          className=\"toolTipWrapper\"\n          clickable\n        >\n          <span>{note}</span>\n        </ReactToolTip>\n      </td>\n    );\n  };\n\n  generateRequestList = () => {\n    const { newRequests, handleRequestClick } = this.props;\n    let requestObjects = [];\n    // 0 = datum, 1 = pgm, 2 = CT, 3 = kund, 4 = prod., 5 = liga, 6 = hemma, 7 = borta, 8 = mitt namn (?), 9 = status, 10 = notering\n    for (let i = 0; i < newRequests.length; i++) {\n      requestObjects.push(\n        <tr key={\"request_\" + i}>\n          <td>{newRequests[i].requestInfo[0]}</td>\n          <td>\n            {newRequests[i].requestInfo[2] +\n              \" (\" +\n              newRequests[i].requestInfo[1] +\n              \")\"}\n          </td>\n          <td>\n            {newRequests[i].requestInfo[4] +\n              \" (\" +\n              newRequests[i].requestInfo[5] +\n              \")\"}\n          </td>\n          <td>\n            {newRequests[i].requestInfo[6] +\n              \" - \" +\n              newRequests[i].requestInfo[7]}\n          </td>\n          {newRequests[i].requestInfo[10].length > 0 ? (\n            this.noteBox(newRequests[i].requestInfo[10])\n          ) : (\n            <td></td>\n          )}\n          <td id={i} onClick={e => handleRequestClick(e)}>\n            {newRequests[i].accepted ? (\n              <FontAwesomeIcon\n                icon={faThumbsUp}\n                style={{ pointerEvents: \"none\" }}\n              />\n            ) : (\n              <FontAwesomeIcon\n                icon={faThumbsDown}\n                style={{ pointerEvents: \"none\" }}\n              />\n            )}\n          </td>\n        </tr>\n      );\n    }\n    return requestObjects;\n  };\n\n  render() {\n    return (\n      <div className=\"tableWrapper\">\n        <Table bordered hover>\n          <thead>\n            <tr>\n              <th>Datum</th>\n              <th>CT (pgm)</th>\n              <th>Prod.</th>\n              <th>Lag</th>\n              <th>Notering</th>\n              <th>Accepterad</th>\n            </tr>\n          </thead>\n          <tbody>{this.generateRequestList()}</tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport Papa from 'papaparse';\nimport Button from 'react-bootstrap/Button';\nimport RequestTable from './components/RequestTable';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      csvfile: undefined,\n      newRequests: [],\n      emailMessage: \"\"\n    }\n    this.updateData = this.updateData.bind(this)\n  }\n\n  handleChange = event => {\n    this.setState({\n      csvfile: event.target.files[0]\n    });\n  };\n\n  importCSV = () => {\n    const { csvfile } = this.state;\n    Papa.parse(csvfile, {\n      complete: this.updateData,\n      header: false\n    })\n  }\n\n  updateData(result) {\n    var data = result.data;\n    for (let i = 3; i < data.length; i++) {\n      if (data[i][9] === \"TillfrÃ¥gad\") {\n        this.setState({\n          newRequests: [...this.state.newRequests, {\n            requestId: \"request_\" + i,\n            accepted: false,\n            requestInfo: data[i]\n          }]\n        })\n      }\n    }\n  }\n\n  handleRequestClick = (e) => {\n    const { newRequests } = this.state;\n    const i = e.target.id;\n    let modifiedRequest = newRequests[i];\n    modifiedRequest.accepted = !this.state.newRequests[i].accepted;\n    this.setState(state => {\n      const newRequests = state.newRequests.map((item, j) => {\n        if (j === i) {\n          return modifiedRequest\n        } else {\n          return item\n        }\n      });\n      return {\n        newRequests,\n      };\n    });\n  }\n\n  copyToClipboard = () => {\n    const el = this.textArea\n    el.select()\n    document.execCommand(\"copy\")\n  }\n\n  formatAMPM = (date) => {\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0'+minutes : minutes;\n    var strTime = hours + ':' + minutes + ' ' + ampm;\n    return strTime;\n  }\n\n  generateOutputCsv = (date, info) => {\n    // Returnera en lista som Ã¤r pÃ¥ csvDataOut-formatet\n    const newDate = date[1] + \"/\" + date[2] + \"/\" + date[0];\n    const rawCT = new Date(\n      parseInt(date[0]),\n      parseInt(date[1] - 1),\n      parseInt(date[2]),\n      parseInt(info[2].split(\":\")[0]),\n      parseInt(info[2].split(\":\")[1])\n    );\n    const rawPGM = new Date(\n      parseInt(date[0]),\n      parseInt(date[1] - 1),\n      parseInt(date[2]),\n      parseInt(info[1].split(\":\")[0]) + 2,\n      parseInt(info[1].split(\":\")[1]) + 40\n    );\n    return [\n      \"Statnet \" + info[5] + \" \" + info[6] + \" - \" + info[7] + \" (\" + info[4] + \")\",\n      newDate,\n      this.formatAMPM(rawCT),\n      newDate,\n      this.formatAMPM(rawPGM),\n      info[10].replace(new RegExp(\",\", \"g\"), \".\")\n    ]\n  }\n\n  generateBookings = () => {\n    const { newRequests } = this.state;\n    const monthNames = {\n      1: \"Jan\",\n      2: \"Feb\",\n      3: \"Mar\",\n      4: \"Apr\",\n      5: \"Maj\",\n      6: \"Jun\",\n      7: \"Jul\",\n      8: \"Aug\",\n      9: \"Sep\",\n      10: \"Okt\",\n      11: \"Nov\",\n      12: \"Dec\",\n    };\n    // Email message\n    let message = \"\";\n    let csvDataOut = [[\"Subject\", \"Start Date\", \"Start Time\", \"End Date\", \"End Time\", \"Description\"]]\n    for (let i = 0; i < newRequests.length; i++) {\n      const answer = newRequests[i].accepted ? \"Ja\" : \"Nej\";\n      let date = newRequests[i].requestInfo[0].split('-');\n      message += date[2] + \" \" + monthNames[parseInt(date[1])] + \": \" + answer + \"\\n\"\n      if (newRequests[i].accepted) {\n        csvDataOut.push(this.generateOutputCsv(date, newRequests[i].requestInfo));\n      }\n    }\n    this.setState({\n      emailMessage: message\n    });\n    // Skapa csv-filen hÃ¤r.\n    console.log(Papa.unparse(csvDataOut));\n    let csvContent = \"data:text/csv;charset=utf-8,\" + csvDataOut.map(e => e.join(\",\")).join(\"\\n\");\n    const encodedUri = encodeURI(csvContent);\n    window.open(encodedUri);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Statnet booking CSV generator</h2>\n        <input\n          className=\"csv-input\"\n          type=\"file\"\n          ref={input => {\n            this.filesInput = input;\n          }}\n          name=\"file\"\n          placeholder={null}\n          onChange={this.handleChange}\n        />\n        <p />\n        <Button onClick={this.importCSV}>Ladda upp fil</Button>\n        {this.state.newRequests.length > 0 ? (\n          <RequestTable newRequests={this.state.newRequests} handleRequestClick={this.handleRequestClick.bind(this)} />\n        ) : null}\n        <Button onClick={this.generateBookings} variant=\"success\">Klar</Button>\n        {this.state.emailMessage.length > 0 ? (\n          <div className=\"emailMessage\">\n            <h3>Svarsmeddelande att maila till bokning:</h3>\n            <textarea\n              ref={textarea => (this.textArea = textarea)}\n              value={this.state.emailMessage}\n              readOnly\n            />\n            <Button onClick={this.copyToClipboard} variant=\"info\">Kopiera meddelande</Button>\n          </div>\n        ) : null}\n      </div>\n    );\n}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}